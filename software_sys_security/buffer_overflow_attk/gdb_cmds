
**Obviously, gdb stack frame is different from the actual stack frame of cpu** 

gdb vulnerable
b bof
run
n //to execute next instruction

//Before bof() makes the ret
print $ebp + 4 // the memory address which stores the ret address as value.
x/4cb $ebp+4   // $ebp+4 points to this memory address : value

0xbfffea2c:	0xb5	0x84	0x4	0x8  // 0x80484b5

You can find the ret address: i) from the disassembled file   ii) using gdb, before bof() returns, Stack top will show you this 


Q. How many A's you have to put?
A. ret_adress - buffer_start 


//before calling strcpy()
//$ebp+8 (which is function argument) will be pushed into stack
//Stack top will point to $ebp+8 which will point to "ABC"
// load buffer adress($ebp-20) to eax 
//eax will be pushed into stack
//Stack top will point to buffer address ($ebp-20) which will point to ""

print $ebp-20 // buffer address: depends on what shell you are using
x/1cb $ebp - 0x20// 1 byte 
x/32cb $ebp - 0x20
print (char *) $ebp - 0x20
//Now buffer will show null string

//Now call strcpy. and after returning from strcpy
//stack top will point to buffer address which will point to "ABC"
//Stack->next wil point to function argument str
x/1cb $ebp - 0x20// 1 byte 
x/56cb $ebp - 0x20
print (char *) $ebp - 0x20


//Calculation: 
//(memory address where ret address is) â€“ (buffer start) = 0x24  = 36
//buffer0...24  + 8bytes(gap) + 4bytes(ebp) = 36

//Shellcode injection
Fake Ret address = buffer address + some value before shellcode starts


ret2lic attack:
gdb vulnerable2
b main
p system     // system address: 0xb7e42da0
p exit         // exit address: 0xb7e369d0
// $BINSH address: 0xbfffffc1    //It's hard to figure out 

//break right after reading
break *0x8048531  
r
x/56cb $ebp - 0x20
